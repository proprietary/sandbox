#include <gtest/gtest.h>

#include <algorithm>
#include <iterator>
#include <unordered_map>
#include <vector>

class Solution {
  public:
  Solution() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    std::cout.tie(nullptr);
  }

  int longestSubarray(std::vector<int>& nums) {
    int ans = 1;
    const auto highest = std::max_element(nums.begin(), nums.end());
    for (auto i = highest; i != nums.end(); ++i) {
      auto j = i;
      while (j != nums.end() && *highest == *j) {
        j++;
      }
      ans = std::max(ans, static_cast<int>(std::distance(i, j)));
      i = j;
      if (i == nums.end()) {
        break;
      }
    }
    return ans;
  }
};

TEST(Test, Example1) {
  std::vector<int> input = {1, 2, 3, 3, 2, 2};
  ASSERT_EQ(2, Solution().longestSubarray(input));
}

TEST(Test, Example2) {
  std::vector<int> input = {1, 2, 3, 4};
  ASSERT_EQ(1, Solution().longestSubarray(input));
}

TEST(Test, Example3) {
  std::vector<int> input = {
      586730, 586730, 586730, 586730, 586730, 586730, 586730, 586730, 586730,
      586730, 586730, 586730, 586730, 586730, 586730, 586730, 586730, 586730,
      586730, 586730, 586730, 586730, 586730, 586730, 586730, 586730, 586730,
      586730, 586730, 586730, 586730, 586730, 586730, 586730, 586730, 586730,
      586730, 586730, 586730, 586730, 586730, 586730, 586730, 586730, 586730,
      586730, 586730, 586730, 586730, 586730, 586730, 586730, 586730, 586730,
      586730, 586730, 586730, 586730, 586730, 586730, 586730, 586730, 586730,
      586730, 586730, 586730, 586730, 586730, 586730, 516529, 516529, 516529,
      516529, 516529, 516529, 516529, 516529, 516529, 516529, 516529, 516529,
      516529, 516529, 516529, 516529, 516529, 516529, 516529, 516529, 516529,
      516529, 516529, 516529, 516529, 516529, 516529, 516529, 516529, 516529,
      55816,  55816,  55816,  55816,  55816,  55816,  55816,  55816,  55816,
      55816,  55816,  55816,  55816,  55816,  55816,  55816,  55816,  55816,
      55816,  55816,  55816,  55816,  55816,  55816,  55816,  55816,  55816,
      55816,  55816,  55816,  55816,  55816,  55816,  55816,  55816,  55816,
      55816,  55816,  55816,  55816,  55816,  55816,  55816,  55816,  55816,
      55816,  55816,  55816,  55816,  55816,  55816,  55816,  55816,  55816,
      55816,  55816,  55816,  55816,  55816,  55816,  55816,  55816,  55816,
      55816,  586730, 586730, 586730, 586730, 586730, 586730, 586730, 586730,
      586730, 586730, 586730, 586730, 586730, 586730, 586730, 586730, 586730,
      586730, 586730, 586730, 586730, 586730, 586730, 586730, 586730, 586730,
      586730, 586730, 586730, 586730, 586730, 586730, 586730, 586730, 586730,
      586730, 586730, 586730, 586730, 586730, 586730, 586730, 586730, 586730,
      586730, 586730, 586730, 586730, 586730, 586730, 586730, 586730, 586730,
      586730, 586730, 586730, 586730, 586730, 586730, 586730, 586730, 586730,
      586730, 586730, 586730, 586730, 586730, 586730, 586730, 586730, 586730,
      586730, 586730, 586730, 586730, 586730, 586730, 586730, 586730, 586730,
      586730, 586730, 586730, 586730, 586730, 586730, 586730, 586730, 586730,
      586730, 586730, 586730, 586730, 586730, 586730, 586730, 586730, 586730,
      586730, 586730, 586730, 586730, 586730, 586730, 586730, 586730, 586730,
      586730, 586730, 586730, 586730, 586730, 586730, 586730, 586730, 586730,
      586730, 586730, 586730, 586730, 586730, 586730, 586730, 586730, 586730,
      232392, 232392, 294503};
  ASSERT_EQ(125, Solution().longestSubarray(input));
}
